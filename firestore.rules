rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function: check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function: check if user owns the document
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }

    // Users collection: cada usuario solo puede leer/escribir su propio documento
    match /users/{uid} {
      // Permitir crear durante el registro (Firebase Auth ya validó la identidad)
      allow create: if isAuthenticated() 
        && request.auth.uid == uid
        && request.resource.data.uid == uid;
      
      // El dueño puede leer, actualizar o eliminar su documento
      allow update, delete: if isOwner(uid);
      
      // Lectura: el dueño puede leer su documento
      // O si es un chofer, su transportista puede leerlo
      // O cualquier autenticado puede leer (necesario para asignación de fletes)
      allow read: if isAuthenticated() && (
        request.auth.uid == uid
        || (resource.data.transportista_id != null 
            && request.auth.uid == resource.data.transportista_id)
        || true  // Permitir que todos los autenticados lean usuarios (necesario para gestión)
      );
    }

    // Transportistas collection: cada transportista solo puede leer/escribir su propio documento
    match /transportistas/{transportistaId} {
      // IMPORTANTE: Permitir lectura SIN autenticación para validar códigos de invitación durante el registro
      // Solo exponemos: uid, codigo_invitacion, razon_social
      allow read: if true;
      
      // Solo puede crear su propio documento al registrarse
      allow create: if isAuthenticated() 
        && request.auth.uid == transportistaId
        && request.resource.data.uid == transportistaId;
      
      // Solo puede actualizar/eliminar su propio documento
      allow update, delete: if isOwner(transportistaId);
    }

    // Camiones collection: cada transportista gestiona sus propios camiones
    match /camiones/{camionId} {
      // Cualquier autenticado puede leer (necesario para asignación de fletes)
      allow read: if isAuthenticated();
      
      // Solo el transportista dueño puede crear camiones
      allow create: if isAuthenticated() 
        && request.resource.data.transportista_id == request.auth.uid;
      
      // Solo el transportista dueño puede actualizar/eliminar
      allow update, delete: if isAuthenticated() 
        && resource.data.transportista_id == request.auth.uid;
    }

    // Fletes collection
    match /fletes/{fleteId} {
      // Lectura: cualquier usuario autenticado puede leer fletes
      allow read: if isAuthenticated();
      
      // Creación: solo el dueño (admin/cliente) puede crear fletes
      allow create: if isAuthenticated() 
        && request.resource.data.cliente_id == request.auth.uid;
      
      // Actualización: diferentes permisos según el caso
      allow update: if isAuthenticated() && (
        // El cliente que creó el flete puede hacer cualquier cambio
        request.auth.uid == resource.data.cliente_id
        
        // O el transportista puede actualizar flete asignado a él
        || (resource.data.transportista_id != null 
            && request.auth.uid == resource.data.transportista_id)
        
        // O cualquier transportista puede asignar un flete disponible (primera asignación)
        || (resource.data.estado == 'disponible' 
            && request.resource.data.estado == 'asignado'
            && request.resource.data.transportista_id == request.auth.uid)
        
        // O el chofer asignado puede actualizar checkpoints y estado
        || (resource.data.chofer_asignado != null 
            && request.auth.uid == resource.data.chofer_asignado)
        
        // O el transportista_asignado (legacy) puede actualizar
        || (resource.data.transportista_asignado != null 
            && request.auth.uid == resource.data.transportista_asignado)
        
        // O cualquier chofer puede cambiar estado de 'disponible' a 'solicitado'
        || (resource.data.estado == 'disponible' 
            && request.resource.data.estado == 'solicitado')
      );
      
      // Eliminación: solo el dueño puede eliminar
      allow delete: if isAuthenticated() 
        && request.auth.uid == resource.data.cliente_id;

      // Subcollection: checkpoints
      match /checkpoints/{checkpointId} {
        // Lectura: cualquier autenticado puede leer
        allow read: if isAuthenticated();
        
        // Escritura: solo el chofer asignado al flete padre o el cliente dueño
        allow create, update: if isAuthenticated() && (
          (exists(/databases/$(database)/documents/fletes/$(fleteId))
           && get(/databases/$(database)/documents/fletes/$(fleteId)).data.transportista_asignado == request.auth.uid)
          || (exists(/databases/$(database)/documents/fletes/$(fleteId))
              && get(/databases/$(database)/documents/fletes/$(fleteId)).data.cliente_id == request.auth.uid)
        );
        
        // Eliminación: solo el cliente dueño
        allow delete: if isAuthenticated()
          && exists(/databases/$(database)/documents/fletes/$(fleteId))
          && get(/databases/$(database)/documents/fletes/$(fleteId)).data.cliente_id == request.auth.uid;
      }
      
      // Subcollection: fotos
      match /fotos/{fotoId} {
        // Lectura: cualquier autenticado
        allow read: if isAuthenticated();
        
        // Escritura: chofer asignado o cliente dueño
        allow create, update: if isAuthenticated() && (
          (exists(/databases/$(database)/documents/fletes/$(fleteId))
           && get(/databases/$(database)/documents/fletes/$(fleteId)).data.transportista_asignado == request.auth.uid)
          || (exists(/databases/$(database)/documents/fletes/$(fleteId))
              && get(/databases/$(database)/documents/fletes/$(fleteId)).data.cliente_id == request.auth.uid)
        );
        
        // Eliminación: solo cliente
        allow delete: if isAuthenticated()
          && exists(/databases/$(database)/documents/fletes/$(fleteId))
          && get(/databases/$(database)/documents/fletes/$(fleteId)).data.cliente_id == request.auth.uid;
      }
    }

    // Solicitudes collection
    match /solicitudes/{fleteId} {
      // Lectura: cualquier autenticado puede leer
      allow read: if isAuthenticated();
      
      // No se permite crear/actualizar/eliminar el documento padre directamente
      allow write: if false;

      // Subcollection: solicitantes
      match /solicitantes/{choferId} {
        // Lectura: cualquier autenticado puede leer
        allow read: if isAuthenticated();
        
        // Creación: el chofer puede crear su propia solicitud
        allow create: if isAuthenticated() 
          && request.auth.uid == choferId
          && request.resource.data.chofer_id == request.auth.uid;
        
        // Actualización: el chofer que creó O el cliente dueño del flete pueden actualizar
        allow update: if isAuthenticated() && (
          request.auth.uid == choferId
          || request.auth.uid == resource.data.cliente_id
        );
        
        // Eliminación: el chofer que la creó O el cliente pueden eliminar
        allow delete: if isAuthenticated() && (
          request.auth.uid == choferId
          || request.auth.uid == resource.data.cliente_id
        );
      }
    }
    
    // IMPORTANTE: Permitir collectionGroup queries en solicitantes
    match /{path=**}/solicitantes/{choferId} {
      allow read: if isAuthenticated();
    }
    
    // IMPORTANTE: Permitir collectionGroup queries en fotos
    match /{path=**}/fotos/{fotoId} {
      allow read: if isAuthenticated();
    }

    // Catch-all: denegar todo lo demás
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
